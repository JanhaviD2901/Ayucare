import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QFormLayout, QLineEdit, QPushButton, QLabel, QMessageBox, QFileDialog

class SpectrumAnalyzerSettingsWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Spectrum Analyzer Settings")

        # Create a central widget and layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        # Create form layout
        self.form_layout = QFormLayout()
        self.layout.addLayout(self.form_layout)

        # Create line edits for each setting
        self.center_frequency_edit = QLineEdit()
        self.frequency_span_edit = QLineEdit()
        self.resolution_bandwidth_edit = QLineEdit()
        self.video_bandwidth_edit = QLineEdit()
        self.reference_level_edit = QLineEdit()
        self.amplitude_scale_edit = QLineEdit()
        self.attenuation_edit = QLineEdit()
        self.video_averaging_number_edit = QLineEdit()
        self.video_avg_edit = QLineEdit()

        # Add fields to the form layout
        self.form_layout.addRow(QLabel("Center Frequency (MHz):"), self.center_frequency_edit)
        self.form_layout.addRow(QLabel("Frequency Span (MHz):"), self.frequency_span_edit)
        self.form_layout.addRow(QLabel("Resolution Bandwidth (KHz):"), self.resolution_bandwidth_edit)
        self.form_layout.addRow(QLabel("Video Bandwidth (KHz):"), self.video_bandwidth_edit)
        self.form_layout.addRow(QLabel("Reference Level (dB):"), self.reference_level_edit)
        self.form_layout.addRow(QLabel("Amplitude Scale:"), self.amplitude_scale_edit)
        self.form_layout.addRow(QLabel("Attenuation (dB):"), self.attenuation_edit)
        self.form_layout.addRow(QLabel("Video Averaging Number:"), self.video_averaging_number_edit)
        self.form_layout.addRow(QLabel("Video AVG:"), self.video_avg_edit)

        # Create and add the load button
        self.load_button = QPushButton("Load Settings")
        self.load_button.clicked.connect(self.load_settings)
        self.layout.addWidget(self.load_button)

        # Create and add the browse button
        self.browse_button = QPushButton("Browse for Settings File")
        self.browse_button.clicked.connect(self.browse_file)
        self.layout.addWidget(self.browse_button)

        self.file_path = ""

    def load_settings(self):
        if not self.file_path:
            QMessageBox.warning(self, "Warning", "No file selected. Please use 'Browse for Settings File' to select a file.")
            return

        try:
            with open(self.file_path, 'r') as file:
                settings = {}
                for line in file:
                    line = line.strip()
                    if line and not line.startswith('Description'):
                        # Split line into key and value based on tab character
                        if '\t' in line:
                            key, value = line.split('\t', 1)
                            key = key.strip()
                            value = value.strip()
                            settings[key] = value

                # Populate fields
                self.center_frequency_edit.setText(settings.get('Center_Frequency(MHz)', ''))
                self.frequency_span_edit.setText(settings.get('Frequency_span(MHz)', ''))
                self.resolution_bandwidth_edit.setText(settings.get('Resolution_Bandwidth(KHz)', ''))
                self.video_bandwidth_edit.setText(settings.get('Video_Bandwidth(KHz)', ''))
                self.reference_level_edit.setText(settings.get('Reference_Level(dB)', ''))
                self.amplitude_scale_edit.setText(settings.get('Amplitude_Scale', ''))
                self.attenuation_edit.setText(settings.get('Attenuation(dB)', ''))
                self.video_averaging_number_edit.setText(settings.get('Video_Averaging_Number', ''))
                self.video_avg_edit.setText(settings.get('Video_AVG', ''))

                QMessageBox.information(self, "Loaded Settings", "Settings successfully loaded from file.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while loading the settings: {e}")

    def browse_file(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Open Settings File", "", "Settings Files (*.set);;All Files (*)", options=options)
        if file_path:
            self.file_path = file_path
            QMessageBox.information(self, "File Selected", f"Selected file: {file_path}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = SpectrumAnalyzerSettingsWindow()
    window.show()
    sys.exit(app.exec_())
